{"version":3,"sources":["logo.svg","childProps/ParentComp.jsx","childProps/ChildComp.jsx","multiSelector/MultiSelectorItem.jsx","multiSelector/MultiSelector.jsx","multiSelector/TestMultiCheckItem.jsx","multiSelector/TestMultiCategories.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ParentComp","children","React","cloneElement","props1","props2","props3","ChildComp","memo","MultiSelectorItem","categories","selectedCategories","exceptionIds","notSelectionIds","onChange","handleSubCategoryListChange","categoryId","selectedSubCategoryInfo","isSelectedCategory","some","category","id","subCategoryIds","subCategory","map","selectedSubCategoryIds","Object","keys","subCategoryId","includes","String","isSelected","newSelectedCategories","toggleCategory","reduce","acc","key","selectedCategory","selectedChildCategory","getChildSelectedCategory","selectedObj","forEach","Fragment","content","title","isCanSelect","className","length","initialSelectedIds","handleSelectedCategories","useState","setSelectedCategories","useEffect","isIncludeSelectedId","selectedSubCategory","getSubSelectedSubCategory","selectedCategoryInfo","isSelectedByParent","categoryList","selectedIdListOnlyParent","getSelectedCategoryIdsOnlyParent","selectedIdList","categoryKey","push","getSelectedCategoryIds","CheckCategoryItem","onClick","type","readOnly","checked","App","selectedItemsParent","setSelectedItemsParent","selectedItems","setSelectedItems","TestMultiCategories","TestMultiCheckItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0dcfd7f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst ParentComp = ({ children }) => {\n    return (\n        <div>\n            {'Parent comp'}\n            {\n                React.cloneElement(children, {\n                    props1: 'props1',\n                    props2: 'props2',\n                    props3: 'props3',\n                })\n            }\n        </div>\n    )\n};\n\nexport default ParentComp;\n","import React from 'react';\n\nconst ChildComp = ({\n    props1,\n    props2,\n    props3,\n}) => {\n    return (\n        <div>\n            {'Child component'}\n            <div>\n            {props1}\n            </div>\n            <div>\n            {props2}\n            </div>\n            <div>\n            {props3}\n            </div>\n        </div>\n    )\n};\n\nexport default ChildComp;\n","import React, { memo } from 'react';\n\nexport const IS_SELECTED_KEY = 'isSelected';\n\nconst MultiSelectorItem = ({\n    children,\n    categories = [],\n    selectedCategories = null,\n    exceptionIds,\n    notSelectionIds,\n    onChange,\n}) => {\n\n    const handleSubCategoryListChange = (categoryId, selectedSubCategoryInfo) => {\n        let isSelectedCategory = true;\n        categories.some((category) => {\n            if (category.id === categoryId) {\n                const subCategoryIds = category.subCategory && category.subCategory.map(subCategory => subCategory.id) || [];\n                const selectedSubCategoryIds = Object.keys(selectedSubCategoryInfo);\n\n                subCategoryIds.some((subCategoryId) => {\n                    if (!selectedSubCategoryIds.includes(String(subCategoryId)) || !!!selectedSubCategoryInfo[subCategoryId].isSelected) {\n                        isSelectedCategory = false;\n                        return true;\n                    }\n                    return false;\n                });\n                return true;\n            }\n            return false;\n        });\n\n        // add sub selections to current optionId\n        const newSelectedCategories = {\n            ...selectedCategories,\n            [categoryId]: {\n                ...selectedSubCategoryInfo,\n                [IS_SELECTED_KEY]: isSelectedCategory,\n            },\n        };\n\n        // call onChange function given by parent\n        onChange(newSelectedCategories);\n    };\n\n    const toggleCategory = (categoryId) => {\n        // is currently selected\n        if (isSelected(categoryId)) {\n            // remove selected key from options list\n            const newSelectedCategories = selectedCategories && Object.keys(selectedCategories).reduce((acc, key) => {\n                if (key !== IS_SELECTED_KEY && +key !== categoryId) {\n                    acc[key] = {\n                        ...selectedCategories[key],\n                    };\n                }\n                return acc;\n            // tslint:disable-next-line: align\n            }, {});\n\n            onChange(newSelectedCategories);\n        } else { // is not currently selected\n            let selectedCategory = null;\n            let selectedChildCategory = {};\n\n            categories.some((category) => {\n                if (category.id === categoryId) {\n                    selectedCategory = { ...category };\n                    selectedChildCategory = getChildSelectedCategory(selectedCategory, {});\n                    return true;\n                }\n                return false;\n            });\n\n            const newSelectedCategories = {\n                ...selectedCategories,\n                [categoryId]: {\n                    ...selectedChildCategory,\n                    [IS_SELECTED_KEY]: true,\n                },\n            };\n\n            // call onChange function given by parent\n            onChange(newSelectedCategories);\n        }\n    };\n\n    const getChildSelectedCategory = (category, selectedObj) => {\n        if (category.subCategory) {\n            category.subCategory.forEach((subCategory) => {\n                selectedObj[subCategory.id] = {\n                    [IS_SELECTED_KEY]: true,\n                };\n                return getChildSelectedCategory(subCategory, selectedObj[subCategory.id]);\n            });\n        }\n        return selectedObj;\n    };\n\n    const isSelected = (categoryId) => {\n        if (selectedCategories && selectedCategories[categoryId]) {\n            return !!selectedCategories[categoryId].isSelected;\n        }\n        return false;\n    };\n\n    return (\n        <>\n        {\n            categories.map((category) => {\n                return (\n                    <React.Fragment key={category.id}>\n                        {\n                            (!exceptionIds.includes(category.id)) && React.cloneElement(children, {\n                                toggleCategory,\n\n                                content: category.title,\n                                id: category.id,\n                                isCanSelect: !notSelectionIds.includes(category.id),\n                                isSelected: isSelected(category.id),\n                            })\n                        }\n                        <div className=\"multi-selector-subcategory-container\">\n                        {\n                            category.subCategory && category.subCategory.length > 0 &&\n                            <MultiSelectorItem\n                                categories={category.subCategory}\n                                selectedCategories={selectedCategories && selectedCategories[category.id]}\n                                exceptionIds={exceptionIds}\n                                notSelectionIds={notSelectionIds}\n                                onChange={(subCategory) =>\n                                    handleSubCategoryListChange(category.id, subCategory)\n                                }\n                            >\n                                {children}\n                            </MultiSelectorItem>\n                        }\n                        </div>\n                    </React.Fragment>\n                );\n            })\n        }\n        </>\n    );\n};\n\nexport default memo(MultiSelectorItem);\n","import React, { memo, useEffect, useState } from 'react';\n\nimport MultiSelectorItem, { IS_SELECTED_KEY } from './MultiSelectorItem';\n\nconst MultiSelector = ({ children,\n    categories, initialSelectedIds,\n    notSelectionIds, exceptionIds,\n    handleSelectedCategories,\n}) => {\n    const [selectedCategories, setSelectedCategories] = useState(null);\n\n    useEffect(() => {\n        const selectedCategory = {};\n\n        if (initialSelectedIds.length > 0) {\n            categories.forEach((category) => {\n                selectedCategory[category.id] = {};\n\n                const isIncludeSelectedId = initialSelectedIds.includes(category.id);\n                const selectedSubCategory = getSubSelectedSubCategory(category, selectedCategory[category.id], isIncludeSelectedId);\n\n                selectedCategory[category.id] = {\n                    [IS_SELECTED_KEY]: isIncludeSelectedId,\n                    ...selectedSubCategory,\n                };\n            });\n        }\n\n        setSelectedCategories(selectedCategory);\n    // tslint:disable-next-line: align\n    }, [initialSelectedIds]);\n\n    const getSubSelectedSubCategory = (\n        category,\n        selectedCategoryInfo,\n        isSelectedByParent,\n    ) => {\n        if (category.subCategory) {\n            category.subCategory.forEach((subCategory) => {\n                const isSelected = isSelectedByParent || initialSelectedIds.includes(subCategory.id);\n\n                selectedCategoryInfo[subCategory.id] = {\n                    [IS_SELECTED_KEY]: isSelected,\n                };\n                return getSubSelectedSubCategory(subCategory, selectedCategoryInfo[subCategory.id], isSelected);\n            });\n        }\n        return selectedCategoryInfo;\n    };\n\n    const getSelectedCategoryIdsOnlyParent = (categoryList, selectedIdList) => {\n        if (categoryList) {\n            Object.keys(categoryList).forEach((categoryKey) => {\n                if (categoryList[categoryKey].isSelected && !notSelectionIds.includes(+categoryKey)) {\n                    selectedIdList.push(+categoryKey);\n                } else {\n                    return getSelectedCategoryIdsOnlyParent(categoryList[categoryKey], selectedIdList);\n                }\n            });\n        }\n\n        return selectedIdList;\n    };\n\n    const getSelectedCategoryIds = (categoryList, selectedIdList) => {\n        if (categoryList) {\n            Object.keys(categoryList).forEach((categoryKey) => {\n                if (categoryList[categoryKey].isSelected && !notSelectionIds.includes(+categoryKey)) {\n                    selectedIdList.push(+categoryKey);\n                }\n                return getSelectedCategoryIds(categoryList[categoryKey], selectedIdList);\n            });\n        }\n        return selectedIdList;\n    };\n\n    const handleChange = (categoryList) => {\n        const selectedIdListOnlyParent = getSelectedCategoryIdsOnlyParent(categoryList, []);\n        const selectedIdList = getSelectedCategoryIds(categoryList, []);\n        handleSelectedCategories(selectedIdListOnlyParent, selectedIdList);\n        setSelectedCategories(categoryList);\n    };\n\n    return (\n        <MultiSelectorItem\n            categories={categories}\n            selectedCategories={selectedCategories}\n            exceptionIds={exceptionIds}\n            notSelectionIds={notSelectionIds}\n            onChange={handleChange}\n        >\n            {children}\n        </MultiSelectorItem>\n    )\n};\n\nexport default memo(MultiSelector);\n","import React from 'react';\n\n// tslint:disable-next-line: variable-name\nconst CheckCategoryItem = ({\n    id, content, isCanSelect, isSelected, toggleCategory,\n}) => {\n    return (\n        <>\n        {\n            isCanSelect\n            ? <div className=\"watem-category-item onclick-cursor-pointer\"\n                onClick={() => toggleCategory && toggleCategory(id)}>\n                <input type=\"checkbox\" readOnly checked={isSelected} />\n                <label>\n                    <span>\n                    </span>\n                </label>\n                {content}\n            </div>\n            : <div className=\"watem-category-item\">{content}</div>\n        }\n        </>\n    );\n};\n\nexport default CheckCategoryItem;\n","const categories = [\n    {\n        id: 1,\n        title: '1',\n        subCategory: [\n        {\n            id: 11,\n            title: '11',\n            subCategory: [\n            {\n                id: 111,\n                title: '111',\n            },\n            {\n                id: 112,\n                title: '112',\n            },\n            {\n                id: 113,\n                title: '113',\n            }\n            ]\n        },\n        {\n            id: 12,\n            title: '12',\n            subCategory: [\n            {\n                id: 121,\n                title: '121',\n            },\n            {\n                id: 122,\n                title: '122',\n            }\n            ]\n        }\n        ]\n    },\n    {\n        id: 2,\n        title: '2',\n        subCategory: [\n        {\n            id: 21,\n            title: '21',\n            subCategory: [\n            {\n                id: 211,\n                title: '211',\n                subCategory: [],\n            }\n            ]\n        }\n        ]\n    },\n    {\n        id: 3,\n        title: '3',\n        subCategory: []\n    }\n]\n\nexport const initialSelectedIds = [];\nexport const exceptionIds = [];\nexport const notSelectionIds = [];\n\nexport default categories;","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport ParentComp from './childProps/ParentComp';\nimport ChildComp from './childProps/ChildComp';\n\nimport MultiSelector from './multiSelector/MultiSelector';\nimport TestMultiCheckItem from './multiSelector/TestMultiCheckItem';\nimport TestMultiCategories, { initialSelectedIds, exceptionIds, notSelectionIds } from './multiSelector/TestMultiCategories';\n\nfunction App() {\n  const [selectedItemsParent, setSelectedItemsParent] = useState([]);\n  const [selectedItems, setSelectedItems] = useState([]);\n\n  const handleSelectedCategories = (selectedIdListOnlyParent, selectedIdList) => {\n    setSelectedItemsParent(selectedIdListOnlyParent);\n    setSelectedItems(selectedIdList);\n  };\n\n  return (\n    <div className=\"App\">\n      <ParentComp>\n        <ChildComp />\n      </ParentComp>\n      <MultiSelector\n        categories={TestMultiCategories}\n        initialSelectedIds={initialSelectedIds}\n        exceptionIds={exceptionIds}\n        notSelectionIds={notSelectionIds}\n        handleSelectedCategories={handleSelectedCategories}\n      >\n        <TestMultiCheckItem/>\n      </MultiSelector>\n      <div>\n        {'Only parent: '}{\n          selectedItemsParent.map((id) => {\n            return `${id}, `;\n          })\n        }\n      </div>\n      <div>\n        {'Whole selected: '}{\n          selectedItems.map((id) => {\n            return `${id}, `;\n          })\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}